<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Compile-toi toi mÃªme</title><link href="http://compiletoi.net/" rel="alternate"></link><link href="http://compiletoi.net/feeds/all.atom.xml" rel="self"></link><id>http://compiletoi.net/</id><updated>2014-03-02T17:50:00+01:00</updated><entry><title>Fast scraping in python with asyncio</title><link href="http://compiletoi.net/fast-scraping-in-python-with-asyncio.html" rel="alternate"></link><updated>2014-03-02T17:50:00+01:00</updated><author><name>Georges Dubus</name></author><id>tag:compiletoi.net,2014-03-02:fast-scraping-in-python-with-asyncio.html</id><summary type="html">&lt;p&gt;Web scraping is one of those subjects that often appears in python
discussions. There are many ways to do this, and there doesn't seem to
be one best way. There are fully fledged frameworks like &lt;a class="reference external" href="http://scrapy.org"&gt;scrapy&lt;/a&gt; and more
lightweight libraries like &lt;a class="reference external" href="http://wwwsearch.sourceforge.net/mechanize/"&gt;mechanize&lt;/a&gt;. Do-it-yourself solutions are
also popular: one can go a long way by using &lt;a class="reference external" href="http://python-requests.org/"&gt;requests&lt;/a&gt; and
&lt;a class="reference external" href="http://www.crummy.com/software/BeautifulSoup/"&gt;beautifulsoup&lt;/a&gt; or &lt;a class="reference external" href="http://pythonhosted.org/pyquery/"&gt;pyquery&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The reason for this diversity is that &amp;quot;scraping&amp;quot; actually covers
multiple problems: you don't need to same tool to extract data from
hundreds of pages and to automate some web workflow (like filling a
few forms and getting some data back). I like the do-it-yourself
approach because it's flexible, but it's not well-suited for massive
data extraction, because &lt;cite&gt;requests&lt;/cite&gt; does requests synchronously, and
many requests means you have to wait a long time.&lt;/p&gt;
&lt;p&gt;In this blog post, I'll present you an alternative to &lt;cite&gt;requests&lt;/cite&gt; based
on the new asyncio library : &lt;a class="reference external" href="https://github.com/KeepSafe/aiohttp"&gt;aiohttp&lt;/a&gt;. I use it to write small
scrapper that are really fast, and I'll show you how.&lt;/p&gt;
&lt;div class="section" id="basics-of-asyncio"&gt;
&lt;h2&gt;Basics of asyncio&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.python.org/3.4/library/asyncio.html"&gt;asyncio&lt;/a&gt; is the asynchronous IO library that was introduced in python
3.4. You can also get it from pypi on python 3.3. It's quite complex
and I won't go too much into details. Instead, I'll explain what you
need to know to write asynchronous code with it. If you want to know
more about, I invite you to read its documentation.&lt;/p&gt;
&lt;p&gt;To make it simple, there are two things you need to know about :
coroutines and event loops. Coroutines are like functions, but they can
be suspended or resume at certain points in the code. This is used to
pause a coroutine while it waits for an IO (an HTTP request, for
example) and execute another one in the meantime. We use the &lt;tt class="docutils literal"&gt;yield
from&lt;/tt&gt; keyword to state that we want the return value of a
coroutine. An event loop is used orchestrate the execution of the coroutines.&lt;/p&gt;
&lt;p&gt;There is much more to asyncio, but that's all we need to know for
now. It might be a little unclear from know, so let's look at some code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;aiohttp&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/KeepSafe/aiohttp"&gt;aiohttp&lt;/a&gt; is a library designed to work with asyncio, with an API that
looks like requests'. It's not very well documented for now, but there
are some very useful &lt;a class="reference external" href="https://github.com/KeepSafe/aiohttp/tree/master/examples"&gt;examples&lt;/a&gt;. We'll first show its basic usage.&lt;/p&gt;
&lt;p&gt;First, we'll define a coroutine to get a page and print it. We use
&lt;tt class="docutils literal"&gt;asyncio.coroutine&lt;/tt&gt; to decorate a function as a
coroutine. &lt;tt class="docutils literal"&gt;aiohttp.request&lt;/tt&gt; is a coroutine, and so is the &lt;tt class="docutils literal"&gt;read&lt;/tt&gt;
method, so we'll need to use &lt;tt class="docutils literal"&gt;yield from&lt;/tt&gt; to call them. Apart from
that, the code looks pretty straightforward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@asyncio.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_and_close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As we have seen, we can call a coroutine from another coroutine with
&lt;tt class="docutils literal"&gt;yield from&lt;/tt&gt;. To call a coroutine from synchronous code, we'll need an
event loop. We can get the standard one with
&lt;tt class="docutils literal"&gt;asyncio.get_event_loop()&lt;/tt&gt; and run the coroutine on it using its
&lt;tt class="docutils literal"&gt;run_until_complete()&lt;/tt&gt; method. So, all we have to do to run the
previous coroutine is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;print_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A useful function is &lt;tt class="docutils literal"&gt;asyncio.wait&lt;/tt&gt;, which takes a list a coroutines
and returns a single coroutine that wrap them all, so we can write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;print_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://example.com/foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                      &lt;span class="n"&gt;print_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://example.com/bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another one is &lt;tt class="docutils literal"&gt;asyncio.as_completed&lt;/tt&gt;, that takes a list of coroutines
and returns an iterator that yield the coroutines in the order in which
they are completed, so that when you iterate on it, you get each
result as soon as it's available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="scraping"&gt;
&lt;h2&gt;Scraping&lt;/h2&gt;
&lt;p&gt;Now that we know how to do asynchronous HTTP requests, we can write a
scrapper. The only other part we need is something to read the html. I
use &lt;a class="reference external" href="http://www.crummy.com/software/BeautifulSoup/"&gt;beautifulsoup&lt;/a&gt; for that, be others like &lt;a class="reference external" href="http://pythonhosted.org/pyquery/"&gt;pyquery&lt;/a&gt; or &lt;a class="reference external" href="http://lxml.de/"&gt;lxml&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For this example, we'll write a small scrapper to get the torrent
links for various linux distributions from the pirate bay.&lt;/p&gt;
&lt;p&gt;First of all, a helper coroutine to do get requests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@asyncio.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_and_close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The parsing part. This post is not about beautifulsoup, so I'll keep
it dumb and simple: we get the first magnet list of the page:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;first_magnet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bs4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Download this torrent using magnet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The coroutine. With this url, results are sorted by number of seeders,
so the first result is actually the most seeded:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@asyncio.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_magnet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://thepiratebay.se/search/{}/0/7/0&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;compress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;magnet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_magnet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;{}: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;magnet&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, the code to call all of this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;distros&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;archlinux&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ubuntu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;debian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;print_magnet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;distros&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And there you go, you have a small scrapper that works
asynchronously. That means the various pages are being downloaded at
the same time, so this example is 3 times faster than the same code
with &lt;cite&gt;requests&lt;/cite&gt;. You should now be able to write your own scrappers in
the same way.&lt;/p&gt;
&lt;p&gt;You can find the resulting code, including the bonus tracks, in this
&lt;a class="reference external" href="https://gist.github.com/madjar/9312452"&gt;gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you are comfortable with all this, I recommend you take a look at
&lt;a class="reference external" href="http://docs.python.org/3.4/library/asyncio.html"&gt;asyncio&lt;/a&gt;'s documentation and aiohttp &lt;a class="reference external" href="https://github.com/KeepSafe/aiohttp/tree/master/examples"&gt;examples&lt;/a&gt;, which will show you
all the potential asyncio have.&lt;/p&gt;
&lt;p&gt;One limitation of this approach (in fact, any hand-made approach) is
that there doesn't seem to be a standalone library to handle
forms. Mechanize and scrapy have nice helpers to easily submit forms,
but if you don't use them, you'll have to do it yourself. This is
something that bugs be, so I might write such a library at some point
(but don't count on it for now).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bonus-track-don-t-hammer-the-server"&gt;
&lt;h2&gt;Bonus track: don't hammer the server&lt;/h2&gt;
&lt;p&gt;Doing 3 requests at the same time is cool, doing 5000, however, is not
so nice. If you try to do too many requests at the same time,
connections might start to get closed, or you might even get banned
from the website.&lt;/p&gt;
&lt;p&gt;To avoid this, you can use a &lt;a class="reference external" href="http://docs.python.org/3.4/library/asyncio-sync.html#semaphores"&gt;semaphore&lt;/a&gt;. It is a synchronization tool
that can be used to limit the number of coroutines that do something
at some point. We'll just create the semaphore before creating the
loop, passing as an argument the number of simultaneous requests we
want to allow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Semaphore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, we just replace:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;compress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;by the same thing, but protected by a semaphore:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;sem&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;compress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will ensure that at most 5 requests can be done at the same time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bonus-track-progress-bar"&gt;
&lt;h2&gt;Bonus track: progress bar&lt;/h2&gt;
&lt;p&gt;This one is just for free: &lt;a class="reference external" href="https://github.com/noamraph/tqdm"&gt;tqdm&lt;/a&gt; is a nice library to make progress
bars. This coroutine works just like &lt;tt class="docutils literal"&gt;asyncio.wait&lt;/tt&gt;, but displays a
progress bar indicating the completion of the coroutines passed to
it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@asyncio.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wait_with_progress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coros&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tqdm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tqdm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_completed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coros&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coros&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="python"></category></entry><entry><title>Pyramid advanced configuration tactics for nice apps and libs</title><link href="http://compiletoi.net/pyramid-advanced-configuration-tactics-for-nice-apps-and-libs.html" rel="alternate"></link><updated>2013-12-19T14:30:00+01:00</updated><author><name>Georges Dubus</name></author><id>tag:compiletoi.net,2013-12-19:pyramid-advanced-configuration-tactics-for-nice-apps-and-libs.html</id><summary type="html">&lt;p&gt;Pyramid is a great framework, and one of the things that makes it
great is its configuration system, which provide both a great way to
organize an application, and an elegant system to write
extensions.&lt;/p&gt;
&lt;p&gt;This talk explain how the configuration system works and how
to use it, then uses example from recognized projects to show how to
make the most out of it, both for structuring applications and writing extensions.&lt;/p&gt;
&lt;p&gt;This is a talk I gave last summer at the Europython, and I just
realized it might be a good idea to post it here. The slides are
available &lt;a class="reference external" href="/slides/europython2013-pyramid/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="youtube" align="center"&gt;&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/VmfWkeUOuYY" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div class="section" id="bonus-persona-will-save-the-world"&gt;
&lt;h2&gt;Bonus: Persona will save the world&lt;/h2&gt;
&lt;p&gt;I also did a lighting talk about persona (&lt;a class="reference external" href="/slides/europython2013-persona/"&gt;slides&lt;/a&gt;):&lt;/p&gt;
&lt;div class="youtube" align="center"&gt;&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/WyKhMggzDB8?starttime=3960" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
</summary><category term="pyramid"></category><category term="python"></category></entry><entry><title>Quick authentication on pyramid with persona</title><link href="http://compiletoi.net/quick-authentication-on-pyramid-with-persona.html" rel="alternate"></link><updated>2012-09-01T15:30:00+02:00</updated><author><name>Georges Dubus</name></author><id>tag:compiletoi.net,2012-09-01:quick-authentication-on-pyramid-with-persona.html</id><summary type="html">&lt;p&gt;A few days ago, the first beta of &lt;a class="reference external" href="https://login.persona.org/"&gt;persona&lt;/a&gt; was released, and I thought
it would be nice to try it as a authentication mechanism in my next
project. For the pyramid framework, the persona documentation pointed
to this blog post : &lt;a class="reference external" href="http://www.rfk.id.au/blog/entry/painless-auth-pyramid-browserid/"&gt;Painless Authentication with Pyramid and
BrowserID&lt;/a&gt;, which describes how to use &lt;cite&gt;pyramid_whoauth&lt;/cite&gt; with
&lt;cite&gt;repoze.who.plugins.browserid&lt;/cite&gt; to use persona in pyramid.&lt;/p&gt;
&lt;p&gt;Sadly, this method only provides a special 403 page with a
login button, and no obvious way to put a login button on another
page. A quick look at the internals revealed it wouldn't be easy to do
so, as most of the work is done inside a wsgi application. To have a
login button, I would have to rewrite the generation of the javascript
that communicates with the persona api, and probably most of the
login code in order to keep the csrf verification.&lt;/p&gt;
&lt;p&gt;So, instead of re-implementing half of it and try to plugin it with
existing implementation, I decided to rewrite it from scratch, and I
though it would be nice to release it as a library. It's called
&lt;a class="reference external" href="https://github.com/madjar/pyramid_persona"&gt;pyramid_persona&lt;/a&gt;, and it's available on &lt;a class="reference external" href="http://pypi.python.org/pypi/pyramid_persona"&gt;pypi&lt;/a&gt;. The README should
explain how to use it, but here is a more visual demonstration.&lt;/p&gt;
&lt;div class="section" id="the-forbidden-view"&gt;
&lt;h2&gt;The forbidden view&lt;/h2&gt;
&lt;p&gt;First, let's show how to have it handle authentication and give us a nice
forbidden view. Let's take a small application with a view that says
hello if we are logged in, and returns a 403 otherwise.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;waitress&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;serve&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyramid.config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Configurator&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyramid.response&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyramid.security&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;authenticated_userid&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyramid.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Forbidden&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;userid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;authenticated_userid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;userid&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Forbidden&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Hello &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;!&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userid&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Configurator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, all we get is an error message:&lt;/p&gt;
&lt;img alt="Basic persona 403 page" src="/images/pyramid-persona/basic.png" /&gt;
&lt;p&gt;Let's include &lt;cite&gt;pyramid_persona&lt;/cite&gt; and add some settings. The secret is
used to sign the cookies, and the audience is a security feature of
persona, to prevent an attacker from logging into your website using
the login process from another website.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;persona.secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;some secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;persona.audiences&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://localhost:8080&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Configurator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pyramid_persona&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We now have a login button on the forbidden page, and the login
process works as expected.&lt;/p&gt;
&lt;img alt="Pyramid_persona's 403 page" src="/images/pyramid-persona/forbidden.png" /&gt;
&lt;p&gt;Clicking on the login button opens the persona login form (in french
for me, because I'm french).&lt;/p&gt;
&lt;img alt="Persona's login popup" src="/images/pyramid-persona/persona.png" /&gt;
&lt;p&gt;Once it's done, we are logged in, the page is reloaded, and everything
works as expected.&lt;/p&gt;
&lt;img alt="Logged-in page" src="/images/pyramid-persona/logged_in.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="a-login-button"&gt;
&lt;h2&gt;A login button&lt;/h2&gt;
&lt;p&gt;We just got a nice, nearly free login system. It would be even nicer
to have login buttons on arbitrary pages.&lt;/p&gt;
&lt;p&gt;That won't be hard. There are some html involved, so let us create a
template for this one. We change the view and the configuration a
little :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;userid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;authenticated_userid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;userid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# ...&lt;/span&gt;

    &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;persona.secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;some secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;persona.audiences&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://localhost:8080&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;mako.directories&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c"&gt;# Where to find the template file&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# ...&lt;/span&gt;

&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hello.mako&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we create a &lt;cite&gt;hello.mako&lt;/cite&gt; file in the same directory :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://login.persona.org/include.js&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;persona_js&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Persona test page&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
Hello ${user}
${request.persona_button}
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need to include the persona api, jquery, and add a little bit of
javascript needed to make persona work (it is provided by
&lt;cite&gt;request.persona_js&lt;/cite&gt;). We use &lt;cite&gt;request.persona_button&lt;/cite&gt; which provides
a simple login/logout button depending on whether the user is logged
in. Here is the result :&lt;/p&gt;
&lt;img alt="Page with login button" src="/images/pyramid-persona/button_out.png" /&gt;
&lt;img alt="Page with logout button" src="/images/pyramid-persona/button_in.png" /&gt;
&lt;p&gt;The button can of course be customized, as can the javascript if you
want to more than just reload the page on login. For more on this,
look at the README.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;cite&gt;pyramid_persona&lt;/cite&gt; provides a quick to setup authentication method,
that can be customized to grow with your app. It is available on
&lt;a class="reference external" href="http://pypi.python.org/pypi/pyramid_persona"&gt;pypi&lt;/a&gt;, so it's pip installable. You can check the readme and the
source on &lt;a class="reference external" href="https://github.com/madjar/pyramid_persona"&gt;github&lt;/a&gt;. Of course, issue reports and suggestions are welcome.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="pyramid"></category><category term="persona"></category><category term="python"></category></entry><entry><title>Good evening ladies and gentlemen, parlez vous franÃ§ais ?</title><link href="http://compiletoi.net/good-evening-ladies-and-gentlemen.html" rel="alternate"></link><updated>2012-06-03T17:20:00+02:00</updated><author><name>Georges Dubus</name></author><id>tag:compiletoi.net,2012-06-03:good-evening-ladies-and-gentlemen.html</id><summary type="html">&lt;p&gt;Hi, I'm Georges Dubus, I'm a french PhD student doing some hacking on
his free time, and here is my tentative of a blog.&lt;/p&gt;
&lt;p&gt;I have wanted to start a blog for a long time, but never really did it
by lack of content idea, motivation, and platform. I have finally
gathered enough time and courage to do it. For the first post, here is
a little technical review of the tools I used to create this, and a
few words about what to expect here in the future.&lt;/p&gt;
&lt;div class="section" id="creating-the-blog"&gt;
&lt;h2&gt;Creating the blog&lt;/h2&gt;
&lt;p&gt;The blog generation engine I use is &lt;a class="reference external" href="http://pelican.notmyidea.org/"&gt;pelican&lt;/a&gt;, which is written in
python by Alexis Metaireau. It's a nice, simple blog engine with posts
in &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;rst&lt;/a&gt; and page templates in &lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;jinja2&lt;/a&gt;. That way, I could
create the layout with my usual IDE, &lt;a class="reference external" href="http://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;, and I can edit posts
with &lt;a class="reference external" href="http://www.gnu.org/software/emacs/"&gt;emacs&lt;/a&gt;. The whole thing is hosted as static github pages.&lt;/p&gt;
&lt;p&gt;The theme is based on the default pelican theme, with some
modifications. The main modification is the color theme, which is
based on a &lt;a class="reference external" href="http://design-seeds.com/index.php/home/entry/country-green"&gt;palette&lt;/a&gt; I found on the internet and I liked.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="future-content"&gt;
&lt;h2&gt;Future content&lt;/h2&gt;
&lt;p&gt;As for the content of this blog, it should mostly be technical
articles about python stuff and the code I write, but maybe more
eclectic content about other things, like my thesis if I find
something blog-suitable to say, or some interesting thoughts I may
have.&lt;/p&gt;
&lt;p&gt;By the way, the name of the blog means &amp;quot;Compile thyself&amp;quot; in french,
and the title of this post is what the french scientist starts his
speach with in &amp;quot;Close encounter of the third kind&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="pelican"></category><category term="emacs"></category><category term="github"></category><category term="blog"></category></entry></feed>