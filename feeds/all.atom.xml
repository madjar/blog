<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Compile-toi toi mÃªme</title><link href="http://compiletoi.net/" rel="alternate"></link><link href="http://compiletoi.net/feeds/all.atom.xml" rel="self"></link><id>http://compiletoi.net/</id><updated>2012-09-01T15:30:00+02:00</updated><entry><title>Quick authentication on pyramid with persona</title><link href="http://compiletoi.net/quick-authentication-on-pyramid-with-persona.html" rel="alternate"></link><updated>2012-09-01T15:30:00+02:00</updated><author><name>Georges Dubus</name></author><id>tag:compiletoi.net,2012-09-01:quick-authentication-on-pyramid-with-persona.html</id><summary type="html">&lt;p&gt;A few days ago, the first beta of &lt;a class="reference external" href="https://login.persona.org/"&gt;persona&lt;/a&gt; was released, and I thought
it would be nice to try it as a authentication mechanism in my next
project. For the pyramid framework, the persona documentation pointed
to this blog post : &lt;a class="reference external" href="http://www.rfk.id.au/blog/entry/painless-auth-pyramid-browserid/"&gt;Painless Authentication with Pyramid and
BrowserID&lt;/a&gt;, which describes how to use &lt;cite&gt;pyramid_whoauth&lt;/cite&gt; with
&lt;cite&gt;repoze.who.plugins.browserid&lt;/cite&gt; to use persona in pyramid.&lt;/p&gt;
&lt;p&gt;Sadly, this method only provides a special 403 page with a
login button, and no obvious way to put a login button on another
page. A quick look at the internals revealed it wouldn't be easy to do
so, as most of the work is done inside a wsgi application. To have a
login button, I would have to rewrite the generation of the javascript
that communicates with the persona api, and probably most of the
login code in order to keep the csrf verification.&lt;/p&gt;
&lt;p&gt;So, instead of re-implementing half of it and try to plugin it with
existing implementation, I decided to rewrite it from scratch, and I
though it would be nice to release it as a library. It's called
&lt;a class="reference external" href="https://github.com/madjar/pyramid_persona"&gt;pyramid_persona&lt;/a&gt;, and it's available on &lt;a class="reference external" href="http://pypi.python.org/pypi/pyramid_persona"&gt;pypi&lt;/a&gt;. The README should
explain how to use it, but here is a more visual demonstration.&lt;/p&gt;
&lt;div class="section" id="the-forbidden-view"&gt;
&lt;h2&gt;The forbidden view&lt;/h2&gt;
&lt;p&gt;First, let's show how to have it handle authentication and give us a nice
forbidden view. Let's take a small application with a view that says
hello if we are logged in, and returns a 403 otherwise.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;waitress&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;serve&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyramid.config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Configurator&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyramid.response&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyramid.security&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;authenticated_userid&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyramid.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Forbidden&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;userid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;authenticated_userid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;userid&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Forbidden&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Hello &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;!&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userid&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Configurator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, all we get is an error message:&lt;/p&gt;
&lt;img alt="" src="images/pyramid-persona/basic.png" /&gt;
&lt;p&gt;Let's include &lt;cite&gt;pyramid_persona&lt;/cite&gt; and add some settings. The secret is
used to sign the cookies, and the audience is a security feature of
persona, to prevent an attacker from logging into your website using
the login process from another website.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;persona.secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;some secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;persona.audiences&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://localhost:8080&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Configurator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pyramid_persona&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We now have a login button on the forbidden page, and the login
process works as expected.&lt;/p&gt;
&lt;img alt="" src="images/pyramid-persona/forbidden.png" /&gt;
&lt;p&gt;Clicking on the login button opens the persona login form (in french
for me, because I'm french).&lt;/p&gt;
&lt;img alt="" src="images/pyramid-persona/persona.png" /&gt;
&lt;p&gt;Once it's done, we are logged in, the page is reloaded, and everything
works as expected.&lt;/p&gt;
&lt;img alt="" src="images/pyramid-persona/logged_in.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="a-login-button"&gt;
&lt;h2&gt;A login button&lt;/h2&gt;
&lt;p&gt;We just got a nice, nearly free login system. It would be even nicer
to have login buttons on arbitrary pages.&lt;/p&gt;
&lt;p&gt;That won't be hard. There are some html involved, so let us create a
template for this one. We change the view and the configuration a
little :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;userid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;authenticated_userid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;userid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# ...&lt;/span&gt;

    &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;persona.secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;some secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;persona.audiences&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://localhost:8080&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;mako.directories&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c"&gt;# Where to find the template file&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# ...&lt;/span&gt;

&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hello.mako&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we create a &lt;cite&gt;hello.mako&lt;/cite&gt; file in the same directory :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://login.persona.org/include.js&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;persona_js&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Persona test page&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
Hello ${user}
${request.persona_button}
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need to include the persona api, jquery, and add a little bit of
javascript needed to make persona work (it is provided by
&lt;cite&gt;request.persona_js&lt;/cite&gt;). We use &lt;cite&gt;request.persona_button&lt;/cite&gt; which provides
a simple login/logout button depending on whether the user is logged
in. Here is the result :&lt;/p&gt;
&lt;img alt="" src="images/pyramid-persona/button_out.png" /&gt;
&lt;img alt="" src="images/pyramid-persona/button_in.png" /&gt;
&lt;p&gt;The button can of course be customized, as can the javascript if you
want to more than just reload the page on login. For more on this,
look at the README.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;cite&gt;pyramid_persona&lt;/cite&gt; provides a quick to setup authentication method,
that can be customized to grow with your app. It is available on
&lt;a class="reference external" href="http://pypi.python.org/pypi/pyramid_persona"&gt;pypi&lt;/a&gt;, so it's pip installable. You can check the readme and the
source on &lt;a class="reference external" href="https://github.com/madjar/pyramid_persona"&gt;github&lt;/a&gt;. Of course, issue reports and suggestions are welcome.&lt;/p&gt;
&lt;!-- Local Variables:
mode: rst
mode: auto-fill
mode: flyspell
ispell-local-dictionary: "english"
End: --&gt;
&lt;/div&gt;
</summary><category term="pyramid"></category><category term="persona"></category><category term="python"></category></entry><entry><title>Good evening ladies and gentlemen, parlez vous franÃ§ais ?</title><link href="http://compiletoi.net/good-evening-ladies-and-gentlemen.html" rel="alternate"></link><updated>2012-06-03T17:20:00+02:00</updated><author><name>Georges Dubus</name></author><id>tag:compiletoi.net,2012-06-03:good-evening-ladies-and-gentlemen.html</id><summary type="html">&lt;p&gt;Hi, I'm Georges Dubus, I'm a french PhD student doing some hacking on
his free time, and here is my tentative of a blog.&lt;/p&gt;
&lt;p&gt;I have wanted to start a blog for a long time, but never really did it
by lack of content idea, motivation, and platform. I have finally
gathered enough time and courage to do it. For the first post, here is
a little technical review of the tools I used to create this, and a
few words about what to expect here in the future.&lt;/p&gt;
&lt;div class="section" id="creating-the-blog"&gt;
&lt;h2&gt;Creating the blog&lt;/h2&gt;
&lt;p&gt;The blog generation engine I use is &lt;a class="reference external" href="http://pelican.notmyidea.org/"&gt;pelican&lt;/a&gt;, which is written in
python by Alexis Metaireau. It's a nice, simple blog engine with posts
in &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;rst&lt;/a&gt; and page templates in &lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;jinja2&lt;/a&gt;. That way, I could
create the layout with my usual IDE, &lt;a class="reference external" href="http://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;, and I can edit posts
with &lt;a class="reference external" href="http://www.gnu.org/software/emacs/"&gt;emacs&lt;/a&gt;. The whole thing is hosted as static github pages.&lt;/p&gt;
&lt;p&gt;The theme is based on the default pelican theme, with some
modifications. The main modification is the color theme, which is
based on a &lt;a class="reference external" href="http://design-seeds.com/index.php/home/entry/country-green"&gt;palette&lt;/a&gt; I found on the internet and I liked.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="future-content"&gt;
&lt;h2&gt;Future content&lt;/h2&gt;
&lt;p&gt;As for the content of this blog, it should mostly be technical
articles about python stuff and the code I write, but maybe more
eclectic content about other things, like my thesis if I find
something blog-suitable to say, or some interesting thoughts I may
have.&lt;/p&gt;
&lt;p&gt;By the way, the name of the blog means &amp;quot;Compile thyself&amp;quot; in french,
and the title of this post is what the french scientist starts his
speach with in &amp;quot;Close encounter of the third kind&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="pelican"></category><category term="emacs"></category><category term="github"></category><category term="blog"></category></entry></feed>